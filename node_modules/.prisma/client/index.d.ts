
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  name: string
  password: string
  apiKey: string
}

/**
 * Model App
 * 
 */
export type App = {
  id: number
  ownerId: number
}

/**
 * Model AppUser
 * 
 */
export type AppUser = {
  id: number
  email: string
  name: string
  password: string
  appId: number
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: number
  name: string
  image: string | null
  price: number
  appId: number
}

/**
 * Model CardProuct
 * 
 */
export type CardProuct = {
  id: number
  itemesCount: number
  productId: number
  customerId: number
  status: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apps
    * const apps = await prisma.app.findMany()
    * ```
    */
  get app(): Prisma.AppDelegate<GlobalReject>;

  /**
   * `prisma.appUser`: Exposes CRUD operations for the **AppUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppUsers
    * const appUsers = await prisma.appUser.findMany()
    * ```
    */
  get appUser(): Prisma.AppUserDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.cardProuct`: Exposes CRUD operations for the **CardProuct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardProucts
    * const cardProucts = await prisma.cardProuct.findMany()
    * ```
    */
  get cardProuct(): Prisma.CardProuctDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    App: 'App',
    AppUser: 'AppUser',
    Product: 'Product',
    CardProuct: 'CardProuct'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    apps: number
  }

  export type UserCountOutputTypeSelect = {
    apps?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AppCountOutputType
   */


  export type AppCountOutputType = {
    AppUser: number
    Product: number
  }

  export type AppCountOutputTypeSelect = {
    AppUser?: boolean
    Product?: boolean
  }

  export type AppCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppCountOutputType
    : S extends undefined
    ? never
    : S extends AppCountOutputTypeArgs
    ?'include' extends U
    ? AppCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AppCountOutputType ? AppCountOutputType[P] : never
  } 
    : AppCountOutputType
  : AppCountOutputType




  // Custom InputTypes

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppCountOutputType
     * 
    **/
    select?: AppCountOutputTypeSelect | null
  }



  /**
   * Count Type AppUserCountOutputType
   */


  export type AppUserCountOutputType = {
    CardProuct: number
  }

  export type AppUserCountOutputTypeSelect = {
    CardProuct?: boolean
  }

  export type AppUserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppUserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppUserCountOutputType
    : S extends undefined
    ? never
    : S extends AppUserCountOutputTypeArgs
    ?'include' extends U
    ? AppUserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AppUserCountOutputType ? AppUserCountOutputType[P] : never
  } 
    : AppUserCountOutputType
  : AppUserCountOutputType




  // Custom InputTypes

  /**
   * AppUserCountOutputType without action
   */
  export type AppUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppUserCountOutputType
     * 
    **/
    select?: AppUserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    CardProuct: number
  }

  export type ProductCountOutputTypeSelect = {
    CardProuct?: boolean
  }

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends ProductCountOutputTypeArgs
    ?'include' extends U
    ? ProductCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
    : ProductCountOutputType
  : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    apiKey: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    apiKey: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    apiKey: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    apiKey?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    apiKey?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    apiKey?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    apiKey: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    apiKey?: boolean
    apps?: boolean | AppFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    apps?: boolean | AppFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'apps' ? Array < AppGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'apps' ? Array < AppGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    apps<T extends AppFindManyArgs = {}>(args?: Subset<T, AppFindManyArgs>): CheckSelect<T, PrismaPromise<Array<App>>, PrismaPromise<Array<AppGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model App
   */


  export type AggregateApp = {
    _count: AppCountAggregateOutputType | null
    _avg: AppAvgAggregateOutputType | null
    _sum: AppSumAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  export type AppAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AppSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AppMinAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AppMaxAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AppCountAggregateOutputType = {
    id: number
    ownerId: number
    _all: number
  }


  export type AppAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AppSumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AppMinAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AppMaxAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AppCountAggregateInputType = {
    id?: true
    ownerId?: true
    _all?: true
  }

  export type AppAggregateArgs = {
    /**
     * Filter which App to aggregate.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apps
    **/
    _count?: true | AppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMaxAggregateInputType
  }

  export type GetAppAggregateType<T extends AppAggregateArgs> = {
        [P in keyof T & keyof AggregateApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp[P]>
      : GetScalarType<T[P], AggregateApp[P]>
  }




  export type AppGroupByArgs = {
    where?: AppWhereInput
    orderBy?: Enumerable<AppOrderByWithAggregationInput>
    by: Array<AppScalarFieldEnum>
    having?: AppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppCountAggregateInputType | true
    _avg?: AppAvgAggregateInputType
    _sum?: AppSumAggregateInputType
    _min?: AppMinAggregateInputType
    _max?: AppMaxAggregateInputType
  }


  export type AppGroupByOutputType = {
    id: number
    ownerId: number
    _count: AppCountAggregateOutputType | null
    _avg: AppAvgAggregateOutputType | null
    _sum: AppSumAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  type GetAppGroupByPayload<T extends AppGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppGroupByOutputType[P]>
            : GetScalarType<T[P], AppGroupByOutputType[P]>
        }
      >
    >


  export type AppSelect = {
    id?: boolean
    ownerId?: boolean
    owner?: boolean | UserArgs
    AppUser?: boolean | AppUserFindManyArgs
    Product?: boolean | ProductFindManyArgs
    _count?: boolean | AppCountOutputTypeArgs
  }

  export type AppInclude = {
    owner?: boolean | UserArgs
    AppUser?: boolean | AppUserFindManyArgs
    Product?: boolean | ProductFindManyArgs
    _count?: boolean | AppCountOutputTypeArgs
  }

  export type AppGetPayload<
    S extends boolean | null | undefined | AppArgs,
    U = keyof S
      > = S extends true
        ? App
    : S extends undefined
    ? never
    : S extends AppArgs | AppFindManyArgs
    ?'include' extends U
    ? App  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'AppUser' ? Array < AppUserGetPayload<S['include'][P]>>  :
        P extends 'Product' ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'AppUser' ? Array < AppUserGetPayload<S['select'][P]>>  :
        P extends 'Product' ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof App ? App[P] : never
  } 
    : App
  : App


  type AppCountArgs = Merge<
    Omit<AppFindManyArgs, 'select' | 'include'> & {
      select?: AppCountAggregateInputType | true
    }
  >

  export interface AppDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one App that matches the filter.
     * @param {AppFindUniqueArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'App'> extends True ? CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>> : CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>

    /**
     * Find the first App that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'App'> extends True ? CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>> : CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>

    /**
     * Find zero or more Apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apps
     * const apps = await prisma.app.findMany()
     * 
     * // Get first 10 Apps
     * const apps = await prisma.app.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appWithIdOnly = await prisma.app.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppFindManyArgs>(
      args?: SelectSubset<T, AppFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<App>>, PrismaPromise<Array<AppGetPayload<T>>>>

    /**
     * Create a App.
     * @param {AppCreateArgs} args - Arguments to create a App.
     * @example
     * // Create one App
     * const App = await prisma.app.create({
     *   data: {
     *     // ... data to create a App
     *   }
     * })
     * 
    **/
    create<T extends AppCreateArgs>(
      args: SelectSubset<T, AppCreateArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Create many Apps.
     *     @param {AppCreateManyArgs} args - Arguments to create many Apps.
     *     @example
     *     // Create many Apps
     *     const app = await prisma.app.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppCreateManyArgs>(
      args?: SelectSubset<T, AppCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a App.
     * @param {AppDeleteArgs} args - Arguments to delete one App.
     * @example
     * // Delete one App
     * const App = await prisma.app.delete({
     *   where: {
     *     // ... filter to delete one App
     *   }
     * })
     * 
    **/
    delete<T extends AppDeleteArgs>(
      args: SelectSubset<T, AppDeleteArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Update one App.
     * @param {AppUpdateArgs} args - Arguments to update one App.
     * @example
     * // Update one App
     * const app = await prisma.app.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppUpdateArgs>(
      args: SelectSubset<T, AppUpdateArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Delete zero or more Apps.
     * @param {AppDeleteManyArgs} args - Arguments to filter Apps to delete.
     * @example
     * // Delete a few Apps
     * const { count } = await prisma.app.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppDeleteManyArgs>(
      args?: SelectSubset<T, AppDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppUpdateManyArgs>(
      args: SelectSubset<T, AppUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one App.
     * @param {AppUpsertArgs} args - Arguments to update or create a App.
     * @example
     * // Update or create a App
     * const app = await prisma.app.upsert({
     *   create: {
     *     // ... data to create a App
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App we want to update
     *   }
     * })
    **/
    upsert<T extends AppUpsertArgs>(
      args: SelectSubset<T, AppUpsertArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Find one App that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AppFindUniqueOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Find the first App that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Count the number of Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppCountArgs} args - Arguments to filter Apps to count.
     * @example
     * // Count the number of Apps
     * const count = await prisma.app.count({
     *   where: {
     *     // ... the filter for the Apps we want to count
     *   }
     * })
    **/
    count<T extends AppCountArgs>(
      args?: Subset<T, AppCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppAggregateArgs>(args: Subset<T, AppAggregateArgs>): PrismaPromise<GetAppAggregateType<T>>

    /**
     * Group by App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppGroupByArgs['orderBy'] }
        : { orderBy?: AppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for App.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    AppUser<T extends AppUserFindManyArgs = {}>(args?: Subset<T, AppUserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AppUser>>, PrismaPromise<Array<AppUserGetPayload<T>>>>;

    Product<T extends ProductFindManyArgs = {}>(args?: Subset<T, ProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * App base type for findUnique actions
   */
  export type AppFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     * 
    **/
    where: AppWhereUniqueInput
  }

  /**
   * App: findUnique
   */
  export interface AppFindUniqueArgs extends AppFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * App base type for findFirst actions
   */
  export type AppFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter, which App to fetch.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     * 
    **/
    distinct?: Enumerable<AppScalarFieldEnum>
  }

  /**
   * App: findFirst
   */
  export interface AppFindFirstArgs extends AppFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * App findMany
   */
  export type AppFindManyArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter, which Apps to fetch.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apps.
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * App create
   */
  export type AppCreateArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The data needed to create a App.
     * 
    **/
    data: XOR<AppCreateInput, AppUncheckedCreateInput>
  }


  /**
   * App createMany
   */
  export type AppCreateManyArgs = {
    /**
     * The data used to create many Apps.
     * 
    **/
    data: Enumerable<AppCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * App update
   */
  export type AppUpdateArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The data needed to update a App.
     * 
    **/
    data: XOR<AppUpdateInput, AppUncheckedUpdateInput>
    /**
     * Choose, which App to update.
     * 
    **/
    where: AppWhereUniqueInput
  }


  /**
   * App updateMany
   */
  export type AppUpdateManyArgs = {
    /**
     * The data used to update Apps.
     * 
    **/
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     * 
    **/
    where?: AppWhereInput
  }


  /**
   * App upsert
   */
  export type AppUpsertArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The filter to search for the App to update in case it exists.
     * 
    **/
    where: AppWhereUniqueInput
    /**
     * In case the App found by the `where` argument doesn't exist, create a new App with this data.
     * 
    **/
    create: XOR<AppCreateInput, AppUncheckedCreateInput>
    /**
     * In case the App was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppUpdateInput, AppUncheckedUpdateInput>
  }


  /**
   * App delete
   */
  export type AppDeleteArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter which App to delete.
     * 
    **/
    where: AppWhereUniqueInput
  }


  /**
   * App deleteMany
   */
  export type AppDeleteManyArgs = {
    /**
     * Filter which Apps to delete
     * 
    **/
    where?: AppWhereInput
  }


  /**
   * App: findUniqueOrThrow
   */
  export type AppFindUniqueOrThrowArgs = AppFindUniqueArgsBase
      

  /**
   * App: findFirstOrThrow
   */
  export type AppFindFirstOrThrowArgs = AppFindFirstArgsBase
      

  /**
   * App without action
   */
  export type AppArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
  }



  /**
   * Model AppUser
   */


  export type AggregateAppUser = {
    _count: AppUserCountAggregateOutputType | null
    _avg: AppUserAvgAggregateOutputType | null
    _sum: AppUserSumAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  export type AppUserAvgAggregateOutputType = {
    id: number | null
    appId: number | null
  }

  export type AppUserSumAggregateOutputType = {
    id: number | null
    appId: number | null
  }

  export type AppUserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    appId: number | null
  }

  export type AppUserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    appId: number | null
  }

  export type AppUserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    appId: number
    _all: number
  }


  export type AppUserAvgAggregateInputType = {
    id?: true
    appId?: true
  }

  export type AppUserSumAggregateInputType = {
    id?: true
    appId?: true
  }

  export type AppUserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    appId?: true
  }

  export type AppUserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    appId?: true
  }

  export type AppUserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    appId?: true
    _all?: true
  }

  export type AppUserAggregateArgs = {
    /**
     * Filter which AppUser to aggregate.
     * 
    **/
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<AppUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppUsers
    **/
    _count?: true | AppUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppUserMaxAggregateInputType
  }

  export type GetAppUserAggregateType<T extends AppUserAggregateArgs> = {
        [P in keyof T & keyof AggregateAppUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppUser[P]>
      : GetScalarType<T[P], AggregateAppUser[P]>
  }




  export type AppUserGroupByArgs = {
    where?: AppUserWhereInput
    orderBy?: Enumerable<AppUserOrderByWithAggregationInput>
    by: Array<AppUserScalarFieldEnum>
    having?: AppUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppUserCountAggregateInputType | true
    _avg?: AppUserAvgAggregateInputType
    _sum?: AppUserSumAggregateInputType
    _min?: AppUserMinAggregateInputType
    _max?: AppUserMaxAggregateInputType
  }


  export type AppUserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    appId: number
    _count: AppUserCountAggregateOutputType | null
    _avg: AppUserAvgAggregateOutputType | null
    _sum: AppUserSumAggregateOutputType | null
    _min: AppUserMinAggregateOutputType | null
    _max: AppUserMaxAggregateOutputType | null
  }

  type GetAppUserGroupByPayload<T extends AppUserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppUserGroupByOutputType[P]>
            : GetScalarType<T[P], AppUserGroupByOutputType[P]>
        }
      >
    >


  export type AppUserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    appId?: boolean
    app?: boolean | AppArgs
    CardProuct?: boolean | CardProuctFindManyArgs
    _count?: boolean | AppUserCountOutputTypeArgs
  }

  export type AppUserInclude = {
    app?: boolean | AppArgs
    CardProuct?: boolean | CardProuctFindManyArgs
    _count?: boolean | AppUserCountOutputTypeArgs
  }

  export type AppUserGetPayload<
    S extends boolean | null | undefined | AppUserArgs,
    U = keyof S
      > = S extends true
        ? AppUser
    : S extends undefined
    ? never
    : S extends AppUserArgs | AppUserFindManyArgs
    ?'include' extends U
    ? AppUser  & {
    [P in TrueKeys<S['include']>]:
        P extends 'app' ? AppGetPayload<S['include'][P]> :
        P extends 'CardProuct' ? Array < CardProuctGetPayload<S['include'][P]>>  :
        P extends '_count' ? AppUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'app' ? AppGetPayload<S['select'][P]> :
        P extends 'CardProuct' ? Array < CardProuctGetPayload<S['select'][P]>>  :
        P extends '_count' ? AppUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof AppUser ? AppUser[P] : never
  } 
    : AppUser
  : AppUser


  type AppUserCountArgs = Merge<
    Omit<AppUserFindManyArgs, 'select' | 'include'> & {
      select?: AppUserCountAggregateInputType | true
    }
  >

  export interface AppUserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one AppUser that matches the filter.
     * @param {AppUserFindUniqueArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AppUser'> extends True ? CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>> : CheckSelect<T, Prisma__AppUserClient<AppUser | null >, Prisma__AppUserClient<AppUserGetPayload<T> | null >>

    /**
     * Find the first AppUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AppUser'> extends True ? CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>> : CheckSelect<T, Prisma__AppUserClient<AppUser | null >, Prisma__AppUserClient<AppUserGetPayload<T> | null >>

    /**
     * Find zero or more AppUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppUsers
     * const appUsers = await prisma.appUser.findMany()
     * 
     * // Get first 10 AppUsers
     * const appUsers = await prisma.appUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appUserWithIdOnly = await prisma.appUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppUserFindManyArgs>(
      args?: SelectSubset<T, AppUserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AppUser>>, PrismaPromise<Array<AppUserGetPayload<T>>>>

    /**
     * Create a AppUser.
     * @param {AppUserCreateArgs} args - Arguments to create a AppUser.
     * @example
     * // Create one AppUser
     * const AppUser = await prisma.appUser.create({
     *   data: {
     *     // ... data to create a AppUser
     *   }
     * })
     * 
    **/
    create<T extends AppUserCreateArgs>(
      args: SelectSubset<T, AppUserCreateArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Create many AppUsers.
     *     @param {AppUserCreateManyArgs} args - Arguments to create many AppUsers.
     *     @example
     *     // Create many AppUsers
     *     const appUser = await prisma.appUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppUserCreateManyArgs>(
      args?: SelectSubset<T, AppUserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AppUser.
     * @param {AppUserDeleteArgs} args - Arguments to delete one AppUser.
     * @example
     * // Delete one AppUser
     * const AppUser = await prisma.appUser.delete({
     *   where: {
     *     // ... filter to delete one AppUser
     *   }
     * })
     * 
    **/
    delete<T extends AppUserDeleteArgs>(
      args: SelectSubset<T, AppUserDeleteArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Update one AppUser.
     * @param {AppUserUpdateArgs} args - Arguments to update one AppUser.
     * @example
     * // Update one AppUser
     * const appUser = await prisma.appUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppUserUpdateArgs>(
      args: SelectSubset<T, AppUserUpdateArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Delete zero or more AppUsers.
     * @param {AppUserDeleteManyArgs} args - Arguments to filter AppUsers to delete.
     * @example
     * // Delete a few AppUsers
     * const { count } = await prisma.appUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppUserDeleteManyArgs>(
      args?: SelectSubset<T, AppUserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppUsers
     * const appUser = await prisma.appUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppUserUpdateManyArgs>(
      args: SelectSubset<T, AppUserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AppUser.
     * @param {AppUserUpsertArgs} args - Arguments to update or create a AppUser.
     * @example
     * // Update or create a AppUser
     * const appUser = await prisma.appUser.upsert({
     *   create: {
     *     // ... data to create a AppUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppUser we want to update
     *   }
     * })
    **/
    upsert<T extends AppUserUpsertArgs>(
      args: SelectSubset<T, AppUserUpsertArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Find one AppUser that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AppUserFindUniqueOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AppUserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Find the first AppUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserFindFirstOrThrowArgs} args - Arguments to find a AppUser
     * @example
     * // Get one AppUser
     * const appUser = await prisma.appUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AppUserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AppUserClient<AppUser>, Prisma__AppUserClient<AppUserGetPayload<T>>>

    /**
     * Count the number of AppUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserCountArgs} args - Arguments to filter AppUsers to count.
     * @example
     * // Count the number of AppUsers
     * const count = await prisma.appUser.count({
     *   where: {
     *     // ... the filter for the AppUsers we want to count
     *   }
     * })
    **/
    count<T extends AppUserCountArgs>(
      args?: Subset<T, AppUserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppUserAggregateArgs>(args: Subset<T, AppUserAggregateArgs>): PrismaPromise<GetAppUserAggregateType<T>>

    /**
     * Group by AppUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppUserGroupByArgs['orderBy'] }
        : { orderBy?: AppUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppUserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    app<T extends AppArgs = {}>(args?: Subset<T, AppArgs>): CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>;

    CardProuct<T extends CardProuctFindManyArgs = {}>(args?: Subset<T, CardProuctFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CardProuct>>, PrismaPromise<Array<CardProuctGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * AppUser base type for findUnique actions
   */
  export type AppUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * Filter, which AppUser to fetch.
     * 
    **/
    where: AppUserWhereUniqueInput
  }

  /**
   * AppUser: findUnique
   */
  export interface AppUserFindUniqueArgs extends AppUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppUser base type for findFirst actions
   */
  export type AppUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * Filter, which AppUser to fetch.
     * 
    **/
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<AppUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppUsers.
     * 
    **/
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppUsers.
     * 
    **/
    distinct?: Enumerable<AppUserScalarFieldEnum>
  }

  /**
   * AppUser: findFirst
   */
  export interface AppUserFindFirstArgs extends AppUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppUser findMany
   */
  export type AppUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * Filter, which AppUsers to fetch.
     * 
    **/
    where?: AppUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppUsers to fetch.
     * 
    **/
    orderBy?: Enumerable<AppUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppUsers.
     * 
    **/
    cursor?: AppUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppUsers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppUsers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppUserScalarFieldEnum>
  }


  /**
   * AppUser create
   */
  export type AppUserCreateArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * The data needed to create a AppUser.
     * 
    **/
    data: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
  }


  /**
   * AppUser createMany
   */
  export type AppUserCreateManyArgs = {
    /**
     * The data used to create many AppUsers.
     * 
    **/
    data: Enumerable<AppUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AppUser update
   */
  export type AppUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * The data needed to update a AppUser.
     * 
    **/
    data: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
    /**
     * Choose, which AppUser to update.
     * 
    **/
    where: AppUserWhereUniqueInput
  }


  /**
   * AppUser updateMany
   */
  export type AppUserUpdateManyArgs = {
    /**
     * The data used to update AppUsers.
     * 
    **/
    data: XOR<AppUserUpdateManyMutationInput, AppUserUncheckedUpdateManyInput>
    /**
     * Filter which AppUsers to update
     * 
    **/
    where?: AppUserWhereInput
  }


  /**
   * AppUser upsert
   */
  export type AppUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * The filter to search for the AppUser to update in case it exists.
     * 
    **/
    where: AppUserWhereUniqueInput
    /**
     * In case the AppUser found by the `where` argument doesn't exist, create a new AppUser with this data.
     * 
    **/
    create: XOR<AppUserCreateInput, AppUserUncheckedCreateInput>
    /**
     * In case the AppUser was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppUserUpdateInput, AppUserUncheckedUpdateInput>
  }


  /**
   * AppUser delete
   */
  export type AppUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
    /**
     * Filter which AppUser to delete.
     * 
    **/
    where: AppUserWhereUniqueInput
  }


  /**
   * AppUser deleteMany
   */
  export type AppUserDeleteManyArgs = {
    /**
     * Filter which AppUsers to delete
     * 
    **/
    where?: AppUserWhereInput
  }


  /**
   * AppUser: findUniqueOrThrow
   */
  export type AppUserFindUniqueOrThrowArgs = AppUserFindUniqueArgsBase
      

  /**
   * AppUser: findFirstOrThrow
   */
  export type AppUserFindFirstOrThrowArgs = AppUserFindFirstArgsBase
      

  /**
   * AppUser without action
   */
  export type AppUserArgs = {
    /**
     * Select specific fields to fetch from the AppUser
     * 
    **/
    select?: AppUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppUserInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    appId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    appId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    appId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    appId: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    image: number
    price: number
    appId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    appId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    appId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    appId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    appId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    appId?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    name: string
    image: string | null
    price: number
    appId: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    name?: boolean
    image?: boolean
    price?: boolean
    appId?: boolean
    app?: boolean | AppArgs
    CardProuct?: boolean | CardProuctFindManyArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductInclude = {
    app?: boolean | AppArgs
    CardProuct?: boolean | CardProuctFindManyArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]:
        P extends 'app' ? AppGetPayload<S['include'][P]> :
        P extends 'CardProuct' ? Array < CardProuctGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'app' ? AppGetPayload<S['select'][P]> :
        P extends 'CardProuct' ? Array < CardProuctGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Find one Product that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    app<T extends AppArgs = {}>(args?: Subset<T, AppArgs>): CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>;

    CardProuct<T extends CardProuctFindManyArgs = {}>(args?: Subset<T, CardProuctFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CardProuct>>, PrismaPromise<Array<CardProuctGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }

  /**
   * Product: findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product: findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product: findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = ProductFindUniqueArgsBase
      

  /**
   * Product: findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = ProductFindFirstArgsBase
      

  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
  }



  /**
   * Model CardProuct
   */


  export type AggregateCardProuct = {
    _count: CardProuctCountAggregateOutputType | null
    _avg: CardProuctAvgAggregateOutputType | null
    _sum: CardProuctSumAggregateOutputType | null
    _min: CardProuctMinAggregateOutputType | null
    _max: CardProuctMaxAggregateOutputType | null
  }

  export type CardProuctAvgAggregateOutputType = {
    id: number | null
    itemesCount: number | null
    productId: number | null
    customerId: number | null
  }

  export type CardProuctSumAggregateOutputType = {
    id: number | null
    itemesCount: number | null
    productId: number | null
    customerId: number | null
  }

  export type CardProuctMinAggregateOutputType = {
    id: number | null
    itemesCount: number | null
    productId: number | null
    customerId: number | null
    status: string | null
  }

  export type CardProuctMaxAggregateOutputType = {
    id: number | null
    itemesCount: number | null
    productId: number | null
    customerId: number | null
    status: string | null
  }

  export type CardProuctCountAggregateOutputType = {
    id: number
    itemesCount: number
    productId: number
    customerId: number
    status: number
    _all: number
  }


  export type CardProuctAvgAggregateInputType = {
    id?: true
    itemesCount?: true
    productId?: true
    customerId?: true
  }

  export type CardProuctSumAggregateInputType = {
    id?: true
    itemesCount?: true
    productId?: true
    customerId?: true
  }

  export type CardProuctMinAggregateInputType = {
    id?: true
    itemesCount?: true
    productId?: true
    customerId?: true
    status?: true
  }

  export type CardProuctMaxAggregateInputType = {
    id?: true
    itemesCount?: true
    productId?: true
    customerId?: true
    status?: true
  }

  export type CardProuctCountAggregateInputType = {
    id?: true
    itemesCount?: true
    productId?: true
    customerId?: true
    status?: true
    _all?: true
  }

  export type CardProuctAggregateArgs = {
    /**
     * Filter which CardProuct to aggregate.
     * 
    **/
    where?: CardProuctWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardProucts to fetch.
     * 
    **/
    orderBy?: Enumerable<CardProuctOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CardProuctWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardProucts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardProucts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardProucts
    **/
    _count?: true | CardProuctCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardProuctAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardProuctSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardProuctMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardProuctMaxAggregateInputType
  }

  export type GetCardProuctAggregateType<T extends CardProuctAggregateArgs> = {
        [P in keyof T & keyof AggregateCardProuct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardProuct[P]>
      : GetScalarType<T[P], AggregateCardProuct[P]>
  }




  export type CardProuctGroupByArgs = {
    where?: CardProuctWhereInput
    orderBy?: Enumerable<CardProuctOrderByWithAggregationInput>
    by: Array<CardProuctScalarFieldEnum>
    having?: CardProuctScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardProuctCountAggregateInputType | true
    _avg?: CardProuctAvgAggregateInputType
    _sum?: CardProuctSumAggregateInputType
    _min?: CardProuctMinAggregateInputType
    _max?: CardProuctMaxAggregateInputType
  }


  export type CardProuctGroupByOutputType = {
    id: number
    itemesCount: number
    productId: number
    customerId: number
    status: string
    _count: CardProuctCountAggregateOutputType | null
    _avg: CardProuctAvgAggregateOutputType | null
    _sum: CardProuctSumAggregateOutputType | null
    _min: CardProuctMinAggregateOutputType | null
    _max: CardProuctMaxAggregateOutputType | null
  }

  type GetCardProuctGroupByPayload<T extends CardProuctGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CardProuctGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardProuctGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardProuctGroupByOutputType[P]>
            : GetScalarType<T[P], CardProuctGroupByOutputType[P]>
        }
      >
    >


  export type CardProuctSelect = {
    id?: boolean
    itemesCount?: boolean
    productId?: boolean
    product?: boolean | ProductArgs
    customerId?: boolean
    customer?: boolean | AppUserArgs
    status?: boolean
  }

  export type CardProuctInclude = {
    product?: boolean | ProductArgs
    customer?: boolean | AppUserArgs
  }

  export type CardProuctGetPayload<
    S extends boolean | null | undefined | CardProuctArgs,
    U = keyof S
      > = S extends true
        ? CardProuct
    : S extends undefined
    ? never
    : S extends CardProuctArgs | CardProuctFindManyArgs
    ?'include' extends U
    ? CardProuct  & {
    [P in TrueKeys<S['include']>]:
        P extends 'product' ? ProductGetPayload<S['include'][P]> :
        P extends 'customer' ? AppUserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'product' ? ProductGetPayload<S['select'][P]> :
        P extends 'customer' ? AppUserGetPayload<S['select'][P]> :  P extends keyof CardProuct ? CardProuct[P] : never
  } 
    : CardProuct
  : CardProuct


  type CardProuctCountArgs = Merge<
    Omit<CardProuctFindManyArgs, 'select' | 'include'> & {
      select?: CardProuctCountAggregateInputType | true
    }
  >

  export interface CardProuctDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CardProuct that matches the filter.
     * @param {CardProuctFindUniqueArgs} args - Arguments to find a CardProuct
     * @example
     * // Get one CardProuct
     * const cardProuct = await prisma.cardProuct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardProuctFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CardProuctFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CardProuct'> extends True ? CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>> : CheckSelect<T, Prisma__CardProuctClient<CardProuct | null >, Prisma__CardProuctClient<CardProuctGetPayload<T> | null >>

    /**
     * Find the first CardProuct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctFindFirstArgs} args - Arguments to find a CardProuct
     * @example
     * // Get one CardProuct
     * const cardProuct = await prisma.cardProuct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardProuctFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CardProuctFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CardProuct'> extends True ? CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>> : CheckSelect<T, Prisma__CardProuctClient<CardProuct | null >, Prisma__CardProuctClient<CardProuctGetPayload<T> | null >>

    /**
     * Find zero or more CardProucts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardProucts
     * const cardProucts = await prisma.cardProuct.findMany()
     * 
     * // Get first 10 CardProucts
     * const cardProucts = await prisma.cardProuct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardProuctWithIdOnly = await prisma.cardProuct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CardProuctFindManyArgs>(
      args?: SelectSubset<T, CardProuctFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CardProuct>>, PrismaPromise<Array<CardProuctGetPayload<T>>>>

    /**
     * Create a CardProuct.
     * @param {CardProuctCreateArgs} args - Arguments to create a CardProuct.
     * @example
     * // Create one CardProuct
     * const CardProuct = await prisma.cardProuct.create({
     *   data: {
     *     // ... data to create a CardProuct
     *   }
     * })
     * 
    **/
    create<T extends CardProuctCreateArgs>(
      args: SelectSubset<T, CardProuctCreateArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Create many CardProucts.
     *     @param {CardProuctCreateManyArgs} args - Arguments to create many CardProucts.
     *     @example
     *     // Create many CardProucts
     *     const cardProuct = await prisma.cardProuct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardProuctCreateManyArgs>(
      args?: SelectSubset<T, CardProuctCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CardProuct.
     * @param {CardProuctDeleteArgs} args - Arguments to delete one CardProuct.
     * @example
     * // Delete one CardProuct
     * const CardProuct = await prisma.cardProuct.delete({
     *   where: {
     *     // ... filter to delete one CardProuct
     *   }
     * })
     * 
    **/
    delete<T extends CardProuctDeleteArgs>(
      args: SelectSubset<T, CardProuctDeleteArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Update one CardProuct.
     * @param {CardProuctUpdateArgs} args - Arguments to update one CardProuct.
     * @example
     * // Update one CardProuct
     * const cardProuct = await prisma.cardProuct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardProuctUpdateArgs>(
      args: SelectSubset<T, CardProuctUpdateArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Delete zero or more CardProucts.
     * @param {CardProuctDeleteManyArgs} args - Arguments to filter CardProucts to delete.
     * @example
     * // Delete a few CardProucts
     * const { count } = await prisma.cardProuct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardProuctDeleteManyArgs>(
      args?: SelectSubset<T, CardProuctDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardProucts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardProucts
     * const cardProuct = await prisma.cardProuct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardProuctUpdateManyArgs>(
      args: SelectSubset<T, CardProuctUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CardProuct.
     * @param {CardProuctUpsertArgs} args - Arguments to update or create a CardProuct.
     * @example
     * // Update or create a CardProuct
     * const cardProuct = await prisma.cardProuct.upsert({
     *   create: {
     *     // ... data to create a CardProuct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardProuct we want to update
     *   }
     * })
    **/
    upsert<T extends CardProuctUpsertArgs>(
      args: SelectSubset<T, CardProuctUpsertArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Find one CardProuct that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CardProuctFindUniqueOrThrowArgs} args - Arguments to find a CardProuct
     * @example
     * // Get one CardProuct
     * const cardProuct = await prisma.cardProuct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardProuctFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CardProuctFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Find the first CardProuct that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctFindFirstOrThrowArgs} args - Arguments to find a CardProuct
     * @example
     * // Get one CardProuct
     * const cardProuct = await prisma.cardProuct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardProuctFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CardProuctFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CardProuctClient<CardProuct>, Prisma__CardProuctClient<CardProuctGetPayload<T>>>

    /**
     * Count the number of CardProucts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctCountArgs} args - Arguments to filter CardProucts to count.
     * @example
     * // Count the number of CardProucts
     * const count = await prisma.cardProuct.count({
     *   where: {
     *     // ... the filter for the CardProucts we want to count
     *   }
     * })
    **/
    count<T extends CardProuctCountArgs>(
      args?: Subset<T, CardProuctCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardProuctCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardProuct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardProuctAggregateArgs>(args: Subset<T, CardProuctAggregateArgs>): PrismaPromise<GetCardProuctAggregateType<T>>

    /**
     * Group by CardProuct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardProuctGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardProuctGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardProuctGroupByArgs['orderBy'] }
        : { orderBy?: CardProuctGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardProuctGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardProuctGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardProuct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CardProuctClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    customer<T extends AppUserArgs = {}>(args?: Subset<T, AppUserArgs>): CheckSelect<T, Prisma__AppUserClient<AppUser | null >, Prisma__AppUserClient<AppUserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CardProuct base type for findUnique actions
   */
  export type CardProuctFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * Filter, which CardProuct to fetch.
     * 
    **/
    where: CardProuctWhereUniqueInput
  }

  /**
   * CardProuct: findUnique
   */
  export interface CardProuctFindUniqueArgs extends CardProuctFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CardProuct base type for findFirst actions
   */
  export type CardProuctFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * Filter, which CardProuct to fetch.
     * 
    **/
    where?: CardProuctWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardProucts to fetch.
     * 
    **/
    orderBy?: Enumerable<CardProuctOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardProucts.
     * 
    **/
    cursor?: CardProuctWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardProucts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardProucts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardProucts.
     * 
    **/
    distinct?: Enumerable<CardProuctScalarFieldEnum>
  }

  /**
   * CardProuct: findFirst
   */
  export interface CardProuctFindFirstArgs extends CardProuctFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CardProuct findMany
   */
  export type CardProuctFindManyArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * Filter, which CardProucts to fetch.
     * 
    **/
    where?: CardProuctWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardProucts to fetch.
     * 
    **/
    orderBy?: Enumerable<CardProuctOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardProucts.
     * 
    **/
    cursor?: CardProuctWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardProucts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardProucts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CardProuctScalarFieldEnum>
  }


  /**
   * CardProuct create
   */
  export type CardProuctCreateArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * The data needed to create a CardProuct.
     * 
    **/
    data: XOR<CardProuctCreateInput, CardProuctUncheckedCreateInput>
  }


  /**
   * CardProuct createMany
   */
  export type CardProuctCreateManyArgs = {
    /**
     * The data used to create many CardProucts.
     * 
    **/
    data: Enumerable<CardProuctCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CardProuct update
   */
  export type CardProuctUpdateArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * The data needed to update a CardProuct.
     * 
    **/
    data: XOR<CardProuctUpdateInput, CardProuctUncheckedUpdateInput>
    /**
     * Choose, which CardProuct to update.
     * 
    **/
    where: CardProuctWhereUniqueInput
  }


  /**
   * CardProuct updateMany
   */
  export type CardProuctUpdateManyArgs = {
    /**
     * The data used to update CardProucts.
     * 
    **/
    data: XOR<CardProuctUpdateManyMutationInput, CardProuctUncheckedUpdateManyInput>
    /**
     * Filter which CardProucts to update
     * 
    **/
    where?: CardProuctWhereInput
  }


  /**
   * CardProuct upsert
   */
  export type CardProuctUpsertArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * The filter to search for the CardProuct to update in case it exists.
     * 
    **/
    where: CardProuctWhereUniqueInput
    /**
     * In case the CardProuct found by the `where` argument doesn't exist, create a new CardProuct with this data.
     * 
    **/
    create: XOR<CardProuctCreateInput, CardProuctUncheckedCreateInput>
    /**
     * In case the CardProuct was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CardProuctUpdateInput, CardProuctUncheckedUpdateInput>
  }


  /**
   * CardProuct delete
   */
  export type CardProuctDeleteArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
    /**
     * Filter which CardProuct to delete.
     * 
    **/
    where: CardProuctWhereUniqueInput
  }


  /**
   * CardProuct deleteMany
   */
  export type CardProuctDeleteManyArgs = {
    /**
     * Filter which CardProucts to delete
     * 
    **/
    where?: CardProuctWhereInput
  }


  /**
   * CardProuct: findUniqueOrThrow
   */
  export type CardProuctFindUniqueOrThrowArgs = CardProuctFindUniqueArgsBase
      

  /**
   * CardProuct: findFirstOrThrow
   */
  export type CardProuctFindFirstOrThrowArgs = CardProuctFindFirstArgsBase
      

  /**
   * CardProuct without action
   */
  export type CardProuctArgs = {
    /**
     * Select specific fields to fetch from the CardProuct
     * 
    **/
    select?: CardProuctSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CardProuctInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AppScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId'
  };

  export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum]


  export const AppUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    appId: 'appId'
  };

  export type AppUserScalarFieldEnum = (typeof AppUserScalarFieldEnum)[keyof typeof AppUserScalarFieldEnum]


  export const CardProuctScalarFieldEnum: {
    id: 'id',
    itemesCount: 'itemesCount',
    productId: 'productId',
    customerId: 'customerId',
    status: 'status'
  };

  export type CardProuctScalarFieldEnum = (typeof CardProuctScalarFieldEnum)[keyof typeof CardProuctScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    price: 'price',
    appId: 'appId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    apiKey: 'apiKey'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    apiKey?: StringFilter | string
    apps?: AppListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    apiKey?: SortOrder
    apps?: AppOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    name?: string
    apiKey?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    apiKey?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    apiKey?: StringWithAggregatesFilter | string
  }

  export type AppWhereInput = {
    AND?: Enumerable<AppWhereInput>
    OR?: Enumerable<AppWhereInput>
    NOT?: Enumerable<AppWhereInput>
    id?: IntFilter | number
    ownerId?: IntFilter | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    AppUser?: AppUserListRelationFilter
    Product?: ProductListRelationFilter
  }

  export type AppOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    AppUser?: AppUserOrderByRelationAggregateInput
    Product?: ProductOrderByRelationAggregateInput
  }

  export type AppWhereUniqueInput = {
    id?: number
  }

  export type AppOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    _count?: AppCountOrderByAggregateInput
    _avg?: AppAvgOrderByAggregateInput
    _max?: AppMaxOrderByAggregateInput
    _min?: AppMinOrderByAggregateInput
    _sum?: AppSumOrderByAggregateInput
  }

  export type AppScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ownerId?: IntWithAggregatesFilter | number
  }

  export type AppUserWhereInput = {
    AND?: Enumerable<AppUserWhereInput>
    OR?: Enumerable<AppUserWhereInput>
    NOT?: Enumerable<AppUserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    appId?: IntFilter | number
    app?: XOR<AppRelationFilter, AppWhereInput>
    CardProuct?: CardProuctListRelationFilter
  }

  export type AppUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    appId?: SortOrder
    app?: AppOrderByWithRelationInput
    CardProuct?: CardProuctOrderByRelationAggregateInput
  }

  export type AppUserWhereUniqueInput = {
    id?: number
    email?: string
    name?: string
  }

  export type AppUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    appId?: SortOrder
    _count?: AppUserCountOrderByAggregateInput
    _avg?: AppUserAvgOrderByAggregateInput
    _max?: AppUserMaxOrderByAggregateInput
    _min?: AppUserMinOrderByAggregateInput
    _sum?: AppUserSumOrderByAggregateInput
  }

  export type AppUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    appId?: IntWithAggregatesFilter | number
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    price?: FloatFilter | number
    appId?: IntFilter | number
    app?: XOR<AppRelationFilter, AppWhereInput>
    CardProuct?: CardProuctListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    appId?: SortOrder
    app?: AppOrderByWithRelationInput
    CardProuct?: CardProuctOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = {
    id?: number
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    appId?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    price?: FloatWithAggregatesFilter | number
    appId?: IntWithAggregatesFilter | number
  }

  export type CardProuctWhereInput = {
    AND?: Enumerable<CardProuctWhereInput>
    OR?: Enumerable<CardProuctWhereInput>
    NOT?: Enumerable<CardProuctWhereInput>
    id?: IntFilter | number
    itemesCount?: IntFilter | number
    productId?: IntFilter | number
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    customerId?: IntFilter | number
    customer?: XOR<AppUserRelationFilter, AppUserWhereInput>
    status?: StringFilter | string
  }

  export type CardProuctOrderByWithRelationInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    product?: ProductOrderByWithRelationInput
    customerId?: SortOrder
    customer?: AppUserOrderByWithRelationInput
    status?: SortOrder
  }

  export type CardProuctWhereUniqueInput = {
    id?: number
  }

  export type CardProuctOrderByWithAggregationInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
    _count?: CardProuctCountOrderByAggregateInput
    _avg?: CardProuctAvgOrderByAggregateInput
    _max?: CardProuctMaxOrderByAggregateInput
    _min?: CardProuctMinOrderByAggregateInput
    _sum?: CardProuctSumOrderByAggregateInput
  }

  export type CardProuctScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CardProuctScalarWhereWithAggregatesInput>
    OR?: Enumerable<CardProuctScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CardProuctScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    itemesCount?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    customerId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    apiKey: string
    apps?: AppCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    apiKey: string
    apps?: AppUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    apps?: AppUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
    apps?: AppUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    apiKey: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
  }

  export type AppCreateInput = {
    owner: UserCreateNestedOneWithoutAppsInput
    AppUser?: AppUserCreateNestedManyWithoutAppInput
    Product?: ProductCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateInput = {
    id?: number
    ownerId: number
    AppUser?: AppUserUncheckedCreateNestedManyWithoutAppInput
    Product?: ProductUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppUpdateInput = {
    owner?: UserUpdateOneRequiredWithoutAppsNestedInput
    AppUser?: AppUserUpdateManyWithoutAppNestedInput
    Product?: ProductUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    AppUser?: AppUserUncheckedUpdateManyWithoutAppNestedInput
    Product?: ProductUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppCreateManyInput = {
    id?: number
    ownerId: number
  }

  export type AppUpdateManyMutationInput = {

  }

  export type AppUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type AppUserCreateInput = {
    email: string
    name: string
    password: string
    app: AppCreateNestedOneWithoutAppUserInput
    CardProuct?: CardProuctCreateNestedManyWithoutCustomerInput
  }

  export type AppUserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    appId: number
    CardProuct?: CardProuctUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type AppUserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutAppUserNestedInput
    CardProuct?: CardProuctUpdateManyWithoutCustomerNestedInput
  }

  export type AppUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    appId?: IntFieldUpdateOperationsInput | number
    CardProuct?: CardProuctUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type AppUserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    appId: number
  }

  export type AppUserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AppUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    appId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateInput = {
    name: string
    image?: string | null
    price: number
    app: AppCreateNestedOneWithoutProductInput
    CardProuct?: CardProuctCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    image?: string | null
    price: number
    appId: number
    CardProuct?: CardProuctUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    app?: AppUpdateOneRequiredWithoutProductNestedInput
    CardProuct?: CardProuctUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    appId?: IntFieldUpdateOperationsInput | number
    CardProuct?: CardProuctUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    image?: string | null
    price: number
    appId: number
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    appId?: IntFieldUpdateOperationsInput | number
  }

  export type CardProuctCreateInput = {
    itemesCount?: number
    product: ProductCreateNestedOneWithoutCardProuctInput
    customer: AppUserCreateNestedOneWithoutCardProuctInput
    status: string
  }

  export type CardProuctUncheckedCreateInput = {
    id?: number
    itemesCount?: number
    productId: number
    customerId: number
    status: string
  }

  export type CardProuctUpdateInput = {
    itemesCount?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCardProuctNestedInput
    customer?: AppUserUpdateOneRequiredWithoutCardProuctNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemesCount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctCreateManyInput = {
    id?: number
    itemesCount?: number
    productId: number
    customerId: number
    status: string
  }

  export type CardProuctUpdateManyMutationInput = {
    itemesCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemesCount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type AppListRelationFilter = {
    every?: AppWhereInput
    some?: AppWhereInput
    none?: AppWhereInput
  }

  export type AppOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    apiKey?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    apiKey?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    apiKey?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AppUserListRelationFilter = {
    every?: AppUserWhereInput
    some?: AppUserWhereInput
    none?: AppUserWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type AppUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AppAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AppMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AppMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AppSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AppRelationFilter = {
    is?: AppWhereInput
    isNot?: AppWhereInput
  }

  export type CardProuctListRelationFilter = {
    every?: CardProuctWhereInput
    some?: CardProuctWhereInput
    none?: CardProuctWhereInput
  }

  export type CardProuctOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    appId?: SortOrder
  }

  export type AppUserAvgOrderByAggregateInput = {
    id?: SortOrder
    appId?: SortOrder
  }

  export type AppUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    appId?: SortOrder
  }

  export type AppUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    appId?: SortOrder
  }

  export type AppUserSumOrderByAggregateInput = {
    id?: SortOrder
    appId?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    appId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    appId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    appId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    appId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    appId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type AppUserRelationFilter = {
    is?: AppUserWhereInput
    isNot?: AppUserWhereInput
  }

  export type CardProuctCountOrderByAggregateInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
  }

  export type CardProuctAvgOrderByAggregateInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
  }

  export type CardProuctMaxOrderByAggregateInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
  }

  export type CardProuctMinOrderByAggregateInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
    status?: SortOrder
  }

  export type CardProuctSumOrderByAggregateInput = {
    id?: SortOrder
    itemesCount?: SortOrder
    productId?: SortOrder
    customerId?: SortOrder
  }

  export type AppCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<AppCreateWithoutOwnerInput>, Enumerable<AppUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutOwnerInput>
    createMany?: AppCreateManyOwnerInputEnvelope
    connect?: Enumerable<AppWhereUniqueInput>
  }

  export type AppUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<AppCreateWithoutOwnerInput>, Enumerable<AppUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutOwnerInput>
    createMany?: AppCreateManyOwnerInputEnvelope
    connect?: Enumerable<AppWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AppUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<AppCreateWithoutOwnerInput>, Enumerable<AppUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<AppUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: AppCreateManyOwnerInputEnvelope
    set?: Enumerable<AppWhereUniqueInput>
    disconnect?: Enumerable<AppWhereUniqueInput>
    delete?: Enumerable<AppWhereUniqueInput>
    connect?: Enumerable<AppWhereUniqueInput>
    update?: Enumerable<AppUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<AppUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<AppScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AppUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<AppCreateWithoutOwnerInput>, Enumerable<AppUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<AppCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<AppUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: AppCreateManyOwnerInputEnvelope
    set?: Enumerable<AppWhereUniqueInput>
    disconnect?: Enumerable<AppWhereUniqueInput>
    delete?: Enumerable<AppWhereUniqueInput>
    connect?: Enumerable<AppWhereUniqueInput>
    update?: Enumerable<AppUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<AppUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<AppScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAppsInput = {
    create?: XOR<UserCreateWithoutAppsInput, UserUncheckedCreateWithoutAppsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppsInput
    connect?: UserWhereUniqueInput
  }

  export type AppUserCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<AppUserCreateWithoutAppInput>, Enumerable<AppUserUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<AppUserCreateOrConnectWithoutAppInput>
    createMany?: AppUserCreateManyAppInputEnvelope
    connect?: Enumerable<AppUserWhereUniqueInput>
  }

  export type ProductCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type AppUserUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<AppUserCreateWithoutAppInput>, Enumerable<AppUserUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<AppUserCreateOrConnectWithoutAppInput>
    createMany?: AppUserCreateManyAppInputEnvelope
    connect?: Enumerable<AppUserWhereUniqueInput>
  }

  export type ProductUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutAppsNestedInput = {
    create?: XOR<UserCreateWithoutAppsInput, UserUncheckedCreateWithoutAppsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppsInput
    upsert?: UserUpsertWithoutAppsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAppsInput, UserUncheckedUpdateWithoutAppsInput>
  }

  export type AppUserUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<AppUserCreateWithoutAppInput>, Enumerable<AppUserUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<AppUserCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<AppUserUpsertWithWhereUniqueWithoutAppInput>
    createMany?: AppUserCreateManyAppInputEnvelope
    set?: Enumerable<AppUserWhereUniqueInput>
    disconnect?: Enumerable<AppUserWhereUniqueInput>
    delete?: Enumerable<AppUserWhereUniqueInput>
    connect?: Enumerable<AppUserWhereUniqueInput>
    update?: Enumerable<AppUserUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<AppUserUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<AppUserScalarWhereInput>
  }

  export type ProductUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type AppUserUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<AppUserCreateWithoutAppInput>, Enumerable<AppUserUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<AppUserCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<AppUserUpsertWithWhereUniqueWithoutAppInput>
    createMany?: AppUserCreateManyAppInputEnvelope
    set?: Enumerable<AppUserWhereUniqueInput>
    disconnect?: Enumerable<AppUserWhereUniqueInput>
    delete?: Enumerable<AppUserWhereUniqueInput>
    connect?: Enumerable<AppUserWhereUniqueInput>
    update?: Enumerable<AppUserUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<AppUserUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<AppUserScalarWhereInput>
  }

  export type ProductUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<Enumerable<ProductCreateWithoutAppInput>, Enumerable<ProductUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ProductCreateManyAppInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type AppCreateNestedOneWithoutAppUserInput = {
    create?: XOR<AppCreateWithoutAppUserInput, AppUncheckedCreateWithoutAppUserInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppUserInput
    connect?: AppWhereUniqueInput
  }

  export type CardProuctCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutCustomerInput>, Enumerable<CardProuctUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutCustomerInput>
    createMany?: CardProuctCreateManyCustomerInputEnvelope
    connect?: Enumerable<CardProuctWhereUniqueInput>
  }

  export type CardProuctUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutCustomerInput>, Enumerable<CardProuctUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutCustomerInput>
    createMany?: CardProuctCreateManyCustomerInputEnvelope
    connect?: Enumerable<CardProuctWhereUniqueInput>
  }

  export type AppUpdateOneRequiredWithoutAppUserNestedInput = {
    create?: XOR<AppCreateWithoutAppUserInput, AppUncheckedCreateWithoutAppUserInput>
    connectOrCreate?: AppCreateOrConnectWithoutAppUserInput
    upsert?: AppUpsertWithoutAppUserInput
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutAppUserInput, AppUncheckedUpdateWithoutAppUserInput>
  }

  export type CardProuctUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutCustomerInput>, Enumerable<CardProuctUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<CardProuctUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: CardProuctCreateManyCustomerInputEnvelope
    set?: Enumerable<CardProuctWhereUniqueInput>
    disconnect?: Enumerable<CardProuctWhereUniqueInput>
    delete?: Enumerable<CardProuctWhereUniqueInput>
    connect?: Enumerable<CardProuctWhereUniqueInput>
    update?: Enumerable<CardProuctUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<CardProuctUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<CardProuctScalarWhereInput>
  }

  export type CardProuctUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutCustomerInput>, Enumerable<CardProuctUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<CardProuctUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: CardProuctCreateManyCustomerInputEnvelope
    set?: Enumerable<CardProuctWhereUniqueInput>
    disconnect?: Enumerable<CardProuctWhereUniqueInput>
    delete?: Enumerable<CardProuctWhereUniqueInput>
    connect?: Enumerable<CardProuctWhereUniqueInput>
    update?: Enumerable<CardProuctUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<CardProuctUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<CardProuctScalarWhereInput>
  }

  export type AppCreateNestedOneWithoutProductInput = {
    create?: XOR<AppCreateWithoutProductInput, AppUncheckedCreateWithoutProductInput>
    connectOrCreate?: AppCreateOrConnectWithoutProductInput
    connect?: AppWhereUniqueInput
  }

  export type CardProuctCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutProductInput>, Enumerable<CardProuctUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutProductInput>
    createMany?: CardProuctCreateManyProductInputEnvelope
    connect?: Enumerable<CardProuctWhereUniqueInput>
  }

  export type CardProuctUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutProductInput>, Enumerable<CardProuctUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutProductInput>
    createMany?: CardProuctCreateManyProductInputEnvelope
    connect?: Enumerable<CardProuctWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AppUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<AppCreateWithoutProductInput, AppUncheckedCreateWithoutProductInput>
    connectOrCreate?: AppCreateOrConnectWithoutProductInput
    upsert?: AppUpsertWithoutProductInput
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutProductInput, AppUncheckedUpdateWithoutProductInput>
  }

  export type CardProuctUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutProductInput>, Enumerable<CardProuctUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CardProuctUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CardProuctCreateManyProductInputEnvelope
    set?: Enumerable<CardProuctWhereUniqueInput>
    disconnect?: Enumerable<CardProuctWhereUniqueInput>
    delete?: Enumerable<CardProuctWhereUniqueInput>
    connect?: Enumerable<CardProuctWhereUniqueInput>
    update?: Enumerable<CardProuctUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CardProuctUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CardProuctScalarWhereInput>
  }

  export type CardProuctUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<CardProuctCreateWithoutProductInput>, Enumerable<CardProuctUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<CardProuctCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<CardProuctUpsertWithWhereUniqueWithoutProductInput>
    createMany?: CardProuctCreateManyProductInputEnvelope
    set?: Enumerable<CardProuctWhereUniqueInput>
    disconnect?: Enumerable<CardProuctWhereUniqueInput>
    delete?: Enumerable<CardProuctWhereUniqueInput>
    connect?: Enumerable<CardProuctWhereUniqueInput>
    update?: Enumerable<CardProuctUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<CardProuctUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<CardProuctScalarWhereInput>
  }

  export type ProductCreateNestedOneWithoutCardProuctInput = {
    create?: XOR<ProductCreateWithoutCardProuctInput, ProductUncheckedCreateWithoutCardProuctInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCardProuctInput
    connect?: ProductWhereUniqueInput
  }

  export type AppUserCreateNestedOneWithoutCardProuctInput = {
    create?: XOR<AppUserCreateWithoutCardProuctInput, AppUserUncheckedCreateWithoutCardProuctInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutCardProuctInput
    connect?: AppUserWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutCardProuctNestedInput = {
    create?: XOR<ProductCreateWithoutCardProuctInput, ProductUncheckedCreateWithoutCardProuctInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCardProuctInput
    upsert?: ProductUpsertWithoutCardProuctInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutCardProuctInput, ProductUncheckedUpdateWithoutCardProuctInput>
  }

  export type AppUserUpdateOneRequiredWithoutCardProuctNestedInput = {
    create?: XOR<AppUserCreateWithoutCardProuctInput, AppUserUncheckedCreateWithoutCardProuctInput>
    connectOrCreate?: AppUserCreateOrConnectWithoutCardProuctInput
    upsert?: AppUserUpsertWithoutCardProuctInput
    connect?: AppUserWhereUniqueInput
    update?: XOR<AppUserUpdateWithoutCardProuctInput, AppUserUncheckedUpdateWithoutCardProuctInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type AppCreateWithoutOwnerInput = {
    AppUser?: AppUserCreateNestedManyWithoutAppInput
    Product?: ProductCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutOwnerInput = {
    id?: number
    AppUser?: AppUserUncheckedCreateNestedManyWithoutAppInput
    Product?: ProductUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutOwnerInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutOwnerInput, AppUncheckedCreateWithoutOwnerInput>
  }

  export type AppCreateManyOwnerInputEnvelope = {
    data: Enumerable<AppCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type AppUpsertWithWhereUniqueWithoutOwnerInput = {
    where: AppWhereUniqueInput
    update: XOR<AppUpdateWithoutOwnerInput, AppUncheckedUpdateWithoutOwnerInput>
    create: XOR<AppCreateWithoutOwnerInput, AppUncheckedCreateWithoutOwnerInput>
  }

  export type AppUpdateWithWhereUniqueWithoutOwnerInput = {
    where: AppWhereUniqueInput
    data: XOR<AppUpdateWithoutOwnerInput, AppUncheckedUpdateWithoutOwnerInput>
  }

  export type AppUpdateManyWithWhereWithoutOwnerInput = {
    where: AppScalarWhereInput
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyWithoutAppsInput>
  }

  export type AppScalarWhereInput = {
    AND?: Enumerable<AppScalarWhereInput>
    OR?: Enumerable<AppScalarWhereInput>
    NOT?: Enumerable<AppScalarWhereInput>
    id?: IntFilter | number
    ownerId?: IntFilter | number
  }

  export type UserCreateWithoutAppsInput = {
    email: string
    name: string
    password: string
    apiKey: string
  }

  export type UserUncheckedCreateWithoutAppsInput = {
    id?: number
    email: string
    name: string
    password: string
    apiKey: string
  }

  export type UserCreateOrConnectWithoutAppsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppsInput, UserUncheckedCreateWithoutAppsInput>
  }

  export type AppUserCreateWithoutAppInput = {
    email: string
    name: string
    password: string
    CardProuct?: CardProuctCreateNestedManyWithoutCustomerInput
  }

  export type AppUserUncheckedCreateWithoutAppInput = {
    id?: number
    email: string
    name: string
    password: string
    CardProuct?: CardProuctUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type AppUserCreateOrConnectWithoutAppInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutAppInput, AppUserUncheckedCreateWithoutAppInput>
  }

  export type AppUserCreateManyAppInputEnvelope = {
    data: Enumerable<AppUserCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutAppInput = {
    name: string
    image?: string | null
    price: number
    CardProuct?: CardProuctCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutAppInput = {
    id?: number
    name: string
    image?: string | null
    price: number
    CardProuct?: CardProuctUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutAppInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutAppInput, ProductUncheckedCreateWithoutAppInput>
  }

  export type ProductCreateManyAppInputEnvelope = {
    data: Enumerable<ProductCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAppsInput = {
    update: XOR<UserUpdateWithoutAppsInput, UserUncheckedUpdateWithoutAppsInput>
    create: XOR<UserCreateWithoutAppsInput, UserUncheckedCreateWithoutAppsInput>
  }

  export type UserUpdateWithoutAppsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutAppsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    apiKey?: StringFieldUpdateOperationsInput | string
  }

  export type AppUserUpsertWithWhereUniqueWithoutAppInput = {
    where: AppUserWhereUniqueInput
    update: XOR<AppUserUpdateWithoutAppInput, AppUserUncheckedUpdateWithoutAppInput>
    create: XOR<AppUserCreateWithoutAppInput, AppUserUncheckedCreateWithoutAppInput>
  }

  export type AppUserUpdateWithWhereUniqueWithoutAppInput = {
    where: AppUserWhereUniqueInput
    data: XOR<AppUserUpdateWithoutAppInput, AppUserUncheckedUpdateWithoutAppInput>
  }

  export type AppUserUpdateManyWithWhereWithoutAppInput = {
    where: AppUserScalarWhereInput
    data: XOR<AppUserUpdateManyMutationInput, AppUserUncheckedUpdateManyWithoutAppUserInput>
  }

  export type AppUserScalarWhereInput = {
    AND?: Enumerable<AppUserScalarWhereInput>
    OR?: Enumerable<AppUserScalarWhereInput>
    NOT?: Enumerable<AppUserScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    appId?: IntFilter | number
  }

  export type ProductUpsertWithWhereUniqueWithoutAppInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutAppInput, ProductUncheckedUpdateWithoutAppInput>
    create: XOR<ProductCreateWithoutAppInput, ProductUncheckedCreateWithoutAppInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutAppInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutAppInput, ProductUncheckedUpdateWithoutAppInput>
  }

  export type ProductUpdateManyWithWhereWithoutAppInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringNullableFilter | string | null
    price?: FloatFilter | number
    appId?: IntFilter | number
  }

  export type AppCreateWithoutAppUserInput = {
    owner: UserCreateNestedOneWithoutAppsInput
    Product?: ProductCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutAppUserInput = {
    id?: number
    ownerId: number
    Product?: ProductUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutAppUserInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutAppUserInput, AppUncheckedCreateWithoutAppUserInput>
  }

  export type CardProuctCreateWithoutCustomerInput = {
    itemesCount?: number
    product: ProductCreateNestedOneWithoutCardProuctInput
    status: string
  }

  export type CardProuctUncheckedCreateWithoutCustomerInput = {
    id?: number
    itemesCount?: number
    productId: number
    status: string
  }

  export type CardProuctCreateOrConnectWithoutCustomerInput = {
    where: CardProuctWhereUniqueInput
    create: XOR<CardProuctCreateWithoutCustomerInput, CardProuctUncheckedCreateWithoutCustomerInput>
  }

  export type CardProuctCreateManyCustomerInputEnvelope = {
    data: Enumerable<CardProuctCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type AppUpsertWithoutAppUserInput = {
    update: XOR<AppUpdateWithoutAppUserInput, AppUncheckedUpdateWithoutAppUserInput>
    create: XOR<AppCreateWithoutAppUserInput, AppUncheckedCreateWithoutAppUserInput>
  }

  export type AppUpdateWithoutAppUserInput = {
    owner?: UserUpdateOneRequiredWithoutAppsNestedInput
    Product?: ProductUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutAppUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    Product?: ProductUncheckedUpdateManyWithoutAppNestedInput
  }

  export type CardProuctUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CardProuctWhereUniqueInput
    update: XOR<CardProuctUpdateWithoutCustomerInput, CardProuctUncheckedUpdateWithoutCustomerInput>
    create: XOR<CardProuctCreateWithoutCustomerInput, CardProuctUncheckedCreateWithoutCustomerInput>
  }

  export type CardProuctUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CardProuctWhereUniqueInput
    data: XOR<CardProuctUpdateWithoutCustomerInput, CardProuctUncheckedUpdateWithoutCustomerInput>
  }

  export type CardProuctUpdateManyWithWhereWithoutCustomerInput = {
    where: CardProuctScalarWhereInput
    data: XOR<CardProuctUpdateManyMutationInput, CardProuctUncheckedUpdateManyWithoutCardProuctInput>
  }

  export type CardProuctScalarWhereInput = {
    AND?: Enumerable<CardProuctScalarWhereInput>
    OR?: Enumerable<CardProuctScalarWhereInput>
    NOT?: Enumerable<CardProuctScalarWhereInput>
    id?: IntFilter | number
    itemesCount?: IntFilter | number
    productId?: IntFilter | number
    customerId?: IntFilter | number
    status?: StringFilter | string
  }

  export type AppCreateWithoutProductInput = {
    owner: UserCreateNestedOneWithoutAppsInput
    AppUser?: AppUserCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutProductInput = {
    id?: number
    ownerId: number
    AppUser?: AppUserUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutProductInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutProductInput, AppUncheckedCreateWithoutProductInput>
  }

  export type CardProuctCreateWithoutProductInput = {
    itemesCount?: number
    customer: AppUserCreateNestedOneWithoutCardProuctInput
    status: string
  }

  export type CardProuctUncheckedCreateWithoutProductInput = {
    id?: number
    itemesCount?: number
    customerId: number
    status: string
  }

  export type CardProuctCreateOrConnectWithoutProductInput = {
    where: CardProuctWhereUniqueInput
    create: XOR<CardProuctCreateWithoutProductInput, CardProuctUncheckedCreateWithoutProductInput>
  }

  export type CardProuctCreateManyProductInputEnvelope = {
    data: Enumerable<CardProuctCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type AppUpsertWithoutProductInput = {
    update: XOR<AppUpdateWithoutProductInput, AppUncheckedUpdateWithoutProductInput>
    create: XOR<AppCreateWithoutProductInput, AppUncheckedCreateWithoutProductInput>
  }

  export type AppUpdateWithoutProductInput = {
    owner?: UserUpdateOneRequiredWithoutAppsNestedInput
    AppUser?: AppUserUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    AppUser?: AppUserUncheckedUpdateManyWithoutAppNestedInput
  }

  export type CardProuctUpsertWithWhereUniqueWithoutProductInput = {
    where: CardProuctWhereUniqueInput
    update: XOR<CardProuctUpdateWithoutProductInput, CardProuctUncheckedUpdateWithoutProductInput>
    create: XOR<CardProuctCreateWithoutProductInput, CardProuctUncheckedCreateWithoutProductInput>
  }

  export type CardProuctUpdateWithWhereUniqueWithoutProductInput = {
    where: CardProuctWhereUniqueInput
    data: XOR<CardProuctUpdateWithoutProductInput, CardProuctUncheckedUpdateWithoutProductInput>
  }

  export type CardProuctUpdateManyWithWhereWithoutProductInput = {
    where: CardProuctScalarWhereInput
    data: XOR<CardProuctUpdateManyMutationInput, CardProuctUncheckedUpdateManyWithoutCardProuctInput>
  }

  export type ProductCreateWithoutCardProuctInput = {
    name: string
    image?: string | null
    price: number
    app: AppCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCardProuctInput = {
    id?: number
    name: string
    image?: string | null
    price: number
    appId: number
  }

  export type ProductCreateOrConnectWithoutCardProuctInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCardProuctInput, ProductUncheckedCreateWithoutCardProuctInput>
  }

  export type AppUserCreateWithoutCardProuctInput = {
    email: string
    name: string
    password: string
    app: AppCreateNestedOneWithoutAppUserInput
  }

  export type AppUserUncheckedCreateWithoutCardProuctInput = {
    id?: number
    email: string
    name: string
    password: string
    appId: number
  }

  export type AppUserCreateOrConnectWithoutCardProuctInput = {
    where: AppUserWhereUniqueInput
    create: XOR<AppUserCreateWithoutCardProuctInput, AppUserUncheckedCreateWithoutCardProuctInput>
  }

  export type ProductUpsertWithoutCardProuctInput = {
    update: XOR<ProductUpdateWithoutCardProuctInput, ProductUncheckedUpdateWithoutCardProuctInput>
    create: XOR<ProductCreateWithoutCardProuctInput, ProductUncheckedCreateWithoutCardProuctInput>
  }

  export type ProductUpdateWithoutCardProuctInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    app?: AppUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCardProuctInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    appId?: IntFieldUpdateOperationsInput | number
  }

  export type AppUserUpsertWithoutCardProuctInput = {
    update: XOR<AppUserUpdateWithoutCardProuctInput, AppUserUncheckedUpdateWithoutCardProuctInput>
    create: XOR<AppUserCreateWithoutCardProuctInput, AppUserUncheckedCreateWithoutCardProuctInput>
  }

  export type AppUserUpdateWithoutCardProuctInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneRequiredWithoutAppUserNestedInput
  }

  export type AppUserUncheckedUpdateWithoutCardProuctInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    appId?: IntFieldUpdateOperationsInput | number
  }

  export type AppCreateManyOwnerInput = {
    id?: number
  }

  export type AppUpdateWithoutOwnerInput = {
    AppUser?: AppUserUpdateManyWithoutAppNestedInput
    Product?: ProductUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    AppUser?: AppUserUncheckedUpdateManyWithoutAppNestedInput
    Product?: ProductUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateManyWithoutAppsInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AppUserCreateManyAppInput = {
    id?: number
    email: string
    name: string
    password: string
  }

  export type ProductCreateManyAppInput = {
    id?: number
    name: string
    image?: string | null
    price: number
  }

  export type AppUserUpdateWithoutAppInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    CardProuct?: CardProuctUpdateManyWithoutCustomerNestedInput
  }

  export type AppUserUncheckedUpdateWithoutAppInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    CardProuct?: CardProuctUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type AppUserUncheckedUpdateManyWithoutAppUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutAppInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    CardProuct?: CardProuctUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutAppInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    CardProuct?: CardProuctUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type CardProuctCreateManyCustomerInput = {
    id?: number
    itemesCount?: number
    productId: number
    status: string
  }

  export type CardProuctUpdateWithoutCustomerInput = {
    itemesCount?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCardProuctNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemesCount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctUncheckedUpdateManyWithoutCardProuctInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemesCount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctCreateManyProductInput = {
    id?: number
    itemesCount?: number
    customerId: number
    status: string
  }

  export type CardProuctUpdateWithoutProductInput = {
    itemesCount?: IntFieldUpdateOperationsInput | number
    customer?: AppUserUpdateOneRequiredWithoutCardProuctNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CardProuctUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemesCount?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}